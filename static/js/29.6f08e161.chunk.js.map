{"version":3,"sources":["components/Thread.js"],"names":["useStyles","makeStyles","theme","card","width","content","cardAns","marginLeft","marginTop","avatar","backgroundColor","ThreadDetailComponent","answers","classes","length","map","ans","className","style","aria-label","author","toUpperCase","title","subheader","date","variant","color","component","description","Answer","open","handleClose","postQuestion","setfiles","files","Close","fullWidth","onClose","scroll","aria-labelledby","aria-describedby","id","outline","onClick","margin","dividers","onSubmit","values","handleSubmit","row","marginBottom","htmlFor","model","name","placeholder","type","onChange","e","target","accept","display","Object","file","ThreadDetail","thread","followUp","useState","setOpen","setFiles","toggleModal","maxWidth","flex","followups","Files","close","prevFiles","arr","arr1","arr2","i","j","push","splice","filter","a","pop","concat","finalObj","keys","Thread","props","thread_id","useParams","success","failed","history","useEffect","fetchThreadDetail","Number","forum","threadDetail","constructor"],"mappings":"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","file":"static/js/29.6f08e161.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Container } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Footer from \"./Footer/Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Grid } from \"@material-ui/core\";\nimport { Control, LocalForm } from \"react-redux-form\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport \"./Forum/Forum.css\";\nimport CustomLoader from \"./Loader\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    width: \"100%\",\n  },\n  content: {\n    width: \"100%\",\n  },\n  cardAns: {\n    width: \"98%\",\n    marginLeft: \"2%\",\n    marginTop: \"10px\",\n  },\n  avatar: {\n    backgroundColor: \"#e03268 !important\",\n  },\n}));\n\nfunction ThreadDetailComponent({ answers }) {\n  const classes = useStyles();\n  if (answers.length > 0) {\n    return answers.map((ans) => {\n      return (\n        <Card className={classes.cardAns}>\n          <CardHeader\n            style={{ backgroundColor: \"#f6f3f1\" }}\n            avatar={\n              <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                {ans.author[0].toUpperCase()}\n              </Avatar>\n            }\n            title={ans.author}\n            subheader={ans.date}\n          />\n          <CardContent className={classes.content}>\n            <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\n              {ans.description}\n            </Typography>\n            {/* <img src={ans.assets[0].image} width={50} height={50} /> */}\n          </CardContent>\n        </Card>\n      );\n    });\n  } else {\n    return <div>No answers yet</div>;\n  }\n}\n\nfunction Answer({ open, handleClose, postQuestion, setfiles, files }) {\n  // const [file, setFile] = useState([]);\n\n  const handleSubmit = (values, files) => {\n    handleClose();\n    postQuestion(values, files);\n  };\n\n  const getFile = (e) => {\n    setfiles(e.target.files, false);\n  };\n\n  const Close = () => {\n    setfiles([], true);\n    handleClose();\n  };\n\n  return (\n    <Dialog\n      className=\"editModal\"\n      fullWidth\n      open={open}\n      onClose={Close}\n      scroll=\"body\"\n      aria-labelledby=\"scroll-dialog-title\"\n      aria-describedby=\"scroll-dialog-description\"\n    >\n      <div className=\"d-flex flex-row\">\n        <DialogTitle id=\"scroll-dialog-title\">Answer</DialogTitle>\n        <div className=\"ml-auto\">\n          <DialogActions>\n            <Button style={{ backgroundColor: \"white\", outline: \"none\" }}>\n              <CloseIcon\n                onClick={Close}\n                style={{ backgroundColor: \"white\", margin: 10 }}\n              />\n            </Button>\n          </DialogActions>\n        </div>\n      </div>\n      <DialogContent dividers={true}>\n        <LocalForm onSubmit={(values) => handleSubmit(values, files)}>\n          <Grid row style={{ marginBottom: 15 }}>\n            <label htmlFor=\"Answer\">Your Answer</label>\n            <Control\n              component=\"textarea\"\n              model=\".Answer\"\n              id=\"Answer\"\n              name=\"Answer\"\n              placeholder=\"Answer\"\n              style={{ width: \"100%\" }}\n            />\n          </Grid>\n          <Grid row style={{ marginBottom: 15 }}>\n            <Button\n              variant=\"contained\"\n              component=\"label\"\n              color=\"secondary\"\n              fullWidth\n            >\n              Attachments &nbsp;\n              <input\n                type=\"file\"\n                id=\"files\"\n                name=\"files\"\n                // multiple\n                onChange={getFile}\n                accept=\"image/*\"\n                style={{ outline: \"none\", display: \"none\" }}\n              />\n            </Button>\n            {Object.values(files).map((file) => {\n              return <div>{file.name}</div>;\n            })}\n          </Grid>\n          <Grid row style={{ marginBottom: 15 }}>\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              fullWidth={true}\n              style={{\n                backgroundColor: \"#09bfad\",\n                color: \"white\",\n                outline: \"none\",\n              }}\n            >\n              Post\n            </Button>\n          </Grid>\n        </LocalForm>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction ThreadDetail({ thread, followUp }) {\n  const [open, setOpen] = useState(false);\n  const [files, setFiles] = useState([]);\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const postQuestion = (values, files) => {\n    followUp(thread.id, values.Answer, files);\n  };\n\n  const setfiles = (Files, close) => {\n    if (close) {\n      setFiles([]);\n    } else {\n      let prevFiles = files;\n      let arr = [];\n      let arr1 = [];\n      let arr2 = [];\n      for (let i = 0; i < Files.length; ++i) {\n        for (let j = 0; j < prevFiles.length; ++j) {\n          if (Files[i].name === prevFiles[j].name) {\n            arr.push(i);\n          }\n        }\n      }\n      arr1 = Object.values(Files);\n      for (let i = 0; i < arr.length; ++i) {\n        arr1.splice(arr[i], 1, null);\n      }\n      arr1 = arr1.filter((a) => a !== null);\n      arr2 = Object.values(prevFiles);\n      arr2.pop();\n      arr1 = arr2.concat(arr1);\n      let finalObj = { ...arr1 };\n      finalObj.length = Object.keys(finalObj).length;\n      setFiles(finalObj);\n    }\n  };\n\n  const classes = useStyles();\n  return (\n    <>\n      <Container className=\"forum\" maxWidth=\"lg\" style={{ marginBottom: 40 }}>\n        <div style={{ display: \"flex\", flex: \"row\" }}>\n          <div>\n            <h2>{thread.title}</h2>\n            <small>{thread.date}</small>\n            <small>\n              &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;{thread.followups.length}{\" \"}\n              answers\n            </small>\n          </div>\n          <div style={{ marginLeft: \"auto\" }}>\n            <Button\n              variant=\"contained\"\n              style={{\n                backgroundColor: \"#09bfad\",\n                color: \"white\",\n                outline: \"none\",\n                marginLeft: \"auto\",\n              }}\n              onClick={toggleModal}\n            >\n              Answer\n            </Button>\n          </div>\n        </div>\n        <hr />\n        <Card className={classes.card}>\n          <CardHeader\n            style={{ backgroundColor: \"#f6f3f1\" }}\n            avatar={\n              <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                {thread.author[0].toUpperCase()}\n              </Avatar>\n            }\n            title={thread.author}\n            subheader={thread.date}\n          />\n          <CardContent>\n            <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\n              {thread.description}\n            </Typography>\n          </CardContent>\n        </Card>\n        <hr />\n        <ThreadDetailComponent answers={thread.followups} />\n        <hr />\n        <div style={{ width: \"100%\" }}>\n          <Button\n            variant=\"contained\"\n            style={{\n              backgroundColor: \"#09bfad\",\n              color: \"white\",\n              outline: \"none\",\n              marginLeft: \"auto\",\n            }}\n            onClick={toggleModal}\n          >\n            Your Answer\n          </Button>\n        </div>\n        <Answer\n          open={open}\n          handleClose={toggleModal}\n          postQuestion={postQuestion}\n          setfiles={setfiles}\n          files={files}\n        />\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nfunction Thread(props) {\n  let { thread_id } = useParams();\n\n  const success = () => {};\n\n  const failed = () => {\n    props.history.push(\"/home\");\n  };\n\n  useEffect(() => {\n    props.fetchThreadDetail(Number(thread_id), success, failed);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (\n    Object.keys(props.forum.threadDetail).length > 0 &&\n    props.forum.threadDetail.constructor === Object\n  ) {\n    return (\n      <ThreadDetail\n        thread={props.forum.threadDetail}\n        followUp={props.followUp}\n      />\n    );\n  } else {\n    return (\n      <div className=\"loader\">\n        <CustomLoader />\n      </div>\n    );\n  }\n}\n\nexport default Thread;\n"],"sourceRoot":""}